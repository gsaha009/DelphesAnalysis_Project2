#include <iostream>
#include <memory>
#include "TFile.h"
#include "TTree.h"
#include "MVASkim.h"

using std::string;
using std::cout;
using std::endl;

MVASkim::MVASkim(const string& filename) {
  _mvaFile = TFile::Open(filename.c_str(), "RECREATE", "Skimmed Tree");
  _mvaFile->cd();
  _tree = new TTree("RTree", "RTree");

  _tree->Branch("event", &_varList.event, "event/I");
  _tree->Branch("hLepPx", &_varList.hLepPx, "hLepPx/F");
  _tree->Branch("hLepPy", &_varList.hLepPy, "hLepPy/F");
  _tree->Branch("hLepPt", &_varList.hLepPt, "hLepPt/F");
  _tree->Branch("hLepEta", &_varList.hLepEta, "hLepEta/F");
  _tree->Branch("met", &_varList.met, "met/F");
  _tree->Branch("nonZmuPt", &_varList.met, "nonZmuPt/F");
  _tree->Branch("X_muMetMT", &_varList.X_muMetMT, "X_muMetMT/F");
  _tree->Branch("mT", &_varList.mT, "mT/F");
  _tree->Branch("mTovSt", &_varList.mTovSt, "mTovSt/F");
  _tree->Branch("muTaDR", &_varList.muTaDR, "muTaDR/F");
  _tree->Branch("muTaDPhi", &_varList.muTaDPhi, "muTaDPhi/F");
  _tree->Branch("muZDR", &_varList.muZDR, "muZDR/F");
  _tree->Branch("muZDPhi", &_varList.muZDPhi, "muZDPhi/F");
  _tree->Branch("colTest", &_varList.colTest, "colTest/F");
  _tree->Branch("colMass", &_varList.colMass, "colMass/F");
  _tree->Branch("tauPt", &_varList.tauPt, "tauPt/F");
  _tree->Branch("ST", &_varList.ST, "ST/F");
  _tree->Branch("nJets", &_varList.nJets, "nJets/F");
  _tree->Branch("nTaus", &_varList.nTaus, "nTaus/F");
  _tree->Branch("LT_noTa", &_varList.LT_noTa, "LT_noTa/F");
  _tree->Branch("LT_Ta", &_varList.LT_Ta, "LT_Ta/F");
  _tree->Branch("METovLT_noTa", &_varList.METovLT_noTa, "METovLT_noTa/F");
  _tree->Branch("METovLT_Ta", &_varList.METovLT_Ta, "METovLT_Ta/F");
  _tree->Branch("ZXpt", &_varList.ZXpt, "ZXpt/F");
  _tree->Branch("XZPlane_Angle", &_varList.XZPlane_Angle, "XZPlane_Angle/F");
  _tree->Branch("XMetPlane_Angle", &_varList.XMetPlane_Angle, "XMetPlane_Angle/F");
  _tree->Branch("ZMetPlane_Angle", &_varList.ZMetPlane_Angle, "ZMetPlane_Angle/F");
  _tree->Branch("PropXPlane_Angle", &_varList.PropXPlane_Angle, "PropXPlane_Angle/F");
  _tree->Branch("PropZPlane_Angle", &_varList.PropZPlane_Angle, "PropZPlane_Angle/F");
  _tree->Branch("XHelicity_Angle", &_varList.XHelicity_Angle, "XHelicity_Angle/F");
  _tree->Branch("PropHelicity_Angle", &_varList.PropHelicity_Angle, "PropHelicity_Angle/F");
  _tree->Branch("RecoMass", &_varList.RecoMass, "RecoMass/F");
  
  _mvaFile->ls();
}
MVASkim::~MVASkim() {
  if (_tree) delete _tree;  
  if (_mvaFile) delete _mvaFile;
}
void MVASkim::fill(const TreeVariables& varList) {
  memcpy(&_varList, &varList, sizeof(varList));
  _mvaFile->cd();
  _tree->Fill();
}
void MVASkim::close() {
  //_mvaFile = TFile::Open(filename.c_str(), "RECREATE", "Skimmed Tree");
  _mvaFile->cd();
  //_tree->Print();
  _tree->Write();
  //_mvaFile->Save();
  //_mvaFile->Write();
  //_mvaFile->Close();
}
